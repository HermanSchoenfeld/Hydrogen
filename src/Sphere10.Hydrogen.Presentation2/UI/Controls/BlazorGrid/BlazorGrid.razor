<h3>Blazor Grid</h3>

@using System;
@using Microsoft.JSInterop
@using System.Collections.Generic;
@using System.Reflection;
@using Sphere10.Framework;
@using UI.Controls.BlazorGrid.Classes; @*Fix This*@

@inject IJSRuntime JSRuntime

<meta charset="UTF-8">
<div class="ResizableClass">
    <button @onclick="ButtonClick">Load</button>

    <table class="TableClass" style="width:100%" id="@Id">
        <thead>
            <tr>
                @if (GridType == GridTypes.ActionColumn)
                {
                    <th style="width:30px">
                        Actions<br />
                        <div class="ResizableClass">
                            <input class="ResizableClass" type="search" />
                        </div>
                    </th>
                }

                @foreach (var headerCell in Header)
                {
                    <th style="width:@headerCell.Width.ToString()px">
                        @headerCell.Name<br />
                        <div class="ResizableClass">
                            <input class="ResizableClass" type="search" />
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in Rows)
            {
                <tr @onmousedown="@(e => OnTableRowMouseDown())" @onmouseup="@(e => OnTableMouseUp(row))" style="@GetTableRowStyle()">

                    @if (GridType == GridTypes.ActionColumn)
                    {
                    <td style="width:30px">
                        @foreach (var action in Actions)
                        {
                            if (action.IsActionAvailable != null && action.IsActionAvailable((TItem)row[0].Tag))
                            {
                                <button title="@action.Name" class="btn btn-success ActionButton" @onclick="@(e => action.ActionWork((TItem)row[0].Tag))">
                                    @action.IconURL
                                </button>
                            }
                        }

                    </td>
                    }

                    @foreach (var cell in row)
                    {
                        <td style="width:@cell.Width.ToString()px">
                            <input class="ResizableClass" type="@cell.GetInputType()" list="@cell.GetListName()" value="@cell.Text"
                                   @onchange="@(e => CellDataChanged(e.Value, cell.Name, cell))"
                                   @onmouseup="CellMouseUp" />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <footer>
        <div>
            <button @onclick="PagingFirst">First</button>
            <button @onclick="PagingNext">Next</button>
            <button @onclick="PagingPrevious">Previous</button>
            <button @onclick="PagingLast">Last</button>
        </div>
    </footer>

    @*Add in the lists, these are for Enums, so they are only declared in one place each*@
    @foreach (var headerCell in Header)
    {
        if (headerCell.TypeInfo.IsEnum)
        {
            <datalist id="@headerCell.Name">
                @foreach (var enumValue in headerCell.TypeInfo.EnumValues)
                {
                    <option value="@enumValue">@enumValue</option>
                }
            </datalist>
        }
    }
</div>

<div class="modal" tabindex="-1" role="dialog" style="@GetContextMenuStyle()">
        <div class="modal-dialog" role="document" aria-hidden="true">
            <div class="modal-content" style="@GetContextMenuContentStyle()" >
                <div class="modal-header">
                    <h5 class="modal-title">Context Menu</h5>
                </div>
                <div class="modal-body">
                    <p @onclick="ContextMenu1">Menu Item 1</p>
                    <p @onclick="ContextMenu2">Menu Item 2</p>
                    <p>-----------</p>
                    <p @onclick="ContextMenu3">Menu Item 3</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseContextMenu">Close</button>
                </div>
            </div>
        </div>
    </div>

<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#ContextMenuModal">Open Modal</button>

@*<div class="modal hidden" id="ContextMenuModal" role="dialog" style="@GetContextMenuStyle()">*@
<!--<div class="modal hidden" id="ContextMenuModal" role="dialog">
    <div class="modal-dialog">-->

        <!-- Modal content-->
        <!--<div class="modal-content" style="@GetContextMenuContentStyle()">
            <div class="modal-header">
                <h5 class="modal-title">Context Menu</h5>
            </div>
            <div class="modal-body">
                <p @onclick="ContextMenu1">Menu Item 1</p>
                <p @onclick="ContextMenu2">Menu Item 2</p>
                <p>-----------</p>
                <p @onclick="ContextMenu3">Menu Item 3</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseContextMenu">Close</button>
            </div>
        </div>

    </div>
</div>-->


@code
{

    @typeparam TItem

    public enum GridTypes { DataSupplied, DataOnDemand, ActionColumn }

    [Parameter] public string Id { get; set; }
    [Parameter] public int PageSize { get; set; }
    [Parameter] public IDataSource<TItem> DataSource { get; set; }
    [Parameter] public GridTypes GridType { get; set; }
    [Parameter] public List<GridAction<TItem>> Actions { get; set; }

    List<Cell> Header { get; set; } = new List<Cell>();
    List<List<Cell>> Rows { get; set; } = new List<List<Cell>>();
    IEnumerable<TItem> Data { get; set; }
    int CurrentPage { get; set; }

    #region Javascript

    void Alert(string text)
    {
        JSRuntime.InvokeAsync<object>("AlertWrite", text);
    }

    #endregion

    #region Grid

    protected override void OnInitialized()
    {
        ControlCheck();

        PagingFirst();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Alert($"OnAfterRenderAsync FirstRender: {firstRender}");

        if (!firstRender)
        {
            //PagingFirst();

            //Alert("OnAfterRenderAsync");

            await LoadJavascript();
            //await JSRuntime.InvokeAsync<object>("ResizableColumnTable", new object[] { Id });
        }
    }

    public async Task LoadJavascript()
    {
        await JSRuntime.InvokeAsync<object>("ResizableColumnTable", new object[] { Id });
    }

    void ControlCheck()
    {
        //Id
        //GridType
        //Data
        //PageSize
        //if (GetPageDataFunction == null) throw new Exception("GetPageDataFunction == null");
        //if (GetDataCountFunction == null) throw new Exception("GetDataCountFunction == null");
        //if (SetItemDataFunction == null) throw new Exception("SetItemDataFunction == null");
        //if (ItemDataChangedFunction == null) throw new Exception("ItemDataChangedFunction == null");
    }

    void LoadData()
    {
        //Alert($"BlazorGrid LoadData {Data.Count()}");
        //Alert($"Type: {Type}");

        // Load the first page of data
        //PagingFirst();

        Header.Clear();
        Rows.Clear();

        var width = 40;
        var height = 20;
        if (Data.Any())
        {
            var first = Data.First();
            var type = first.GetType();
            var properties = type.GetProperties().ToList();
            var typeInfos = new List<ObjectTypeInfo>();

            // Add the Action column
            //var headerTypeInfo = new ObjectTypeInfo("Action");
            //typeInfos.Add(headerTypeInfo);
            //Header.Add(new Cell(new HeaderData("Action", width), new RowData(height), headerTypeInfo, "Action", "Action"));

            foreach (var property in properties)
            {
                var name = Utility.AddSpacesForCamelCase(property.Name);

                var typeInfo = new ObjectTypeInfo(property);
                typeInfos.Add(typeInfo);

                Header.Add(new Cell(new HeaderData(name, width), new RowData(height), typeInfo, name, name, typeInfos.Count - 1));
            }

            foreach (var dataObject in Data)
            {
                var rowData = new List<Cell>();
                int columnIndex = 0;

                //var cellText = string.Empty;
                //var cellData = new Cell(Header[columnIndex].Header, Header[columnIndex].Row, typeInfos[columnIndex], cellText, dataObject);
                //rowData.Add(cellData);
                //columnIndex++;

                foreach (var property in properties)
                {
                    var cellText = GetCellText(dataObject, property);
                    var cellData = new Cell(Header[columnIndex].Header, Header[columnIndex].Row, typeInfos[columnIndex], cellText, dataObject, columnIndex);
                    rowData.Add(cellData);
                    columnIndex++;
                }

                Rows.Add(rowData);
            }
        }

        JSRuntime.InvokeAsync<object>("ResizableColumnTable", new object[] { Id }, DotNetObjectReference.Create<BlazorGrid<TItem>>(this));
    }

    // put this into Cell
    string GetCellText(object cellData, PropertyInfo property)
    {
        var value = property.GetValue(cellData);
        var typeName = property.PropertyType.Name.ToString();
        switch (typeName)
        {
            case "DateTime": return ((DateTime)value).ToString("yyyy-MM-dd");
            default: return value.ToString();
        }
    }

    private void CellDataChanged(object valueObject, string dataName, Cell cell)
    {
        var newValue = valueObject.ToString();

        // update the underlying value in the cell
        cell.UpdateData(newValue);

        Alert(cell.Tag.ToString());

        // return the updated underlying value to the DataSource
        var itemInList = new List<TItem>() { (TItem)cell.Tag };

        DataSource.Update(itemInList);
    }

    private bool CellContextMenu(object entity)
    {
        return false;
    }

    string GetContextMenuStyle()
    {
        //       if (MenuShown) return $"display:block; top: {MenuX}px; left:{MenuY}px;";
        if (MenuShown) return $"display:block;";

        return "display:hidden";
    }

    string GetContextMenuContentStyle()
    {
        return $"width:200px; height:300px; left:{MenuX}px;top:{MenuY}px;";
    }

    string GetActionButtonItem(GridAction<TItem> item)
    {
        return $"<i class=\"{item.IconURL} btn btn-success\"></i>";
    }

    void CloseContextMenu()
    {
        CloseMenu();
    }

    void CellMouseUp(MouseEventArgs args)
    {
        if (args.Button == 2)
        {
            OpenMenu((int)args.ClientX - 650, (int)args.ClientY - 30);
        }
    }

    bool MenuShown { get; set; }
    int MenuX { get; set; }
    int MenuY { get; set; }

    void OpenMenu(int menuX, int menuY)
    {
        //        Alert($"X: {menuX} Y: {menuY}");

        MenuX = menuX;
        MenuY = menuY;
        MenuShown = true;
        //        StateHasChanged();
    }

    void CloseMenu()
    {
        MenuShown = false;
        //        StateHasChanged();
    }

    void ContextMenu1()
    {
        Alert("1");
    }

    void ContextMenu2()
    {
        Alert("2");
    }

    void ContextMenu3()
    {
        Alert("3");
    }

    void OnTableRowMouseDown()
    {

    }

    void OnTableMouseUp(List<Cell> cells)
    {

    }

    string GetTableRowStyle()
    {
        return string.Empty;
    }

    void ButtonClick()
    {
        GetPageAndDisplayData();
    }

    #endregion

    #region Paging

    void PagingFirst()
    {
        //if (CurrentPage == 0) return;
        CurrentPage = 0;
        GetPageAndDisplayData();
        StateHasChanged();
    }

    void PagingNext()
    {
        CurrentPage++;
        GetPageAndDisplayData();
        StateHasChanged();
    }

    void PagingPrevious()
    {
        if (CurrentPage == 0) return;
        CurrentPage--;
        GetPageAndDisplayData();
        StateHasChanged();
    }

    void PagingLast()
    {
        // callback to the server
        var total = DataSource.Count.Result;
        CurrentPage = total / PageSize;
        GetPageAndDisplayData();
        StateHasChanged();
    }

    async void GetPageAndDisplayData()
    {
        // callback to the server

        var useCurrentPage = CurrentPage;
        Data = (IEnumerable<TItem>)await DataSource.Read("", PageSize, ref useCurrentPage, "", SortDirection.Ascending, out int totalItems);
        CurrentPage = useCurrentPage;
        LoadData();
        StateHasChanged();
    }

    #endregion
}