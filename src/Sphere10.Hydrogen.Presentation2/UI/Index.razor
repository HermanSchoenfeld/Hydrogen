@page "/"
@using Sphere10.Hydrogen.Presentation2.Logic.Modal
@using Sphere10.Hydrogen.Presentation2.Logic.Wizard
@using Sphere10.Hydrogen.Presentation2.UI.Wizard
@using Sphere10.Framework
@using System.Threading
@using Sphere10.Hydrogen.Presentation2.UI.Wizard.Examples
@implements IDisposable

<div class="row">
    <div class="col-6">
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs pull-right" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" data-toggle="tab" href="#tab-1">Table</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-toggle="tab" href="#tab-2">Virtual</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-toggle="tab" href="#tab-3">Rapid</a>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane fade active show" id="tab-1">
                        <h5 class="card-title">Paged table</h5>
                        <PagedTable
                            Items="Enumerable.Range(1, 100)"
                            TItem="int"
                            OnRowSelect="OnRowSelectAsync"
                            Class="table table-hover table-striped w-100">
                            <HeaderTemplate>
                                <tr>
                                    <th>i</th>
                                </tr>
                            </HeaderTemplate>
                            <ItemTemplate Context="i">
                                <tr>
                                    <td>@i</td>
                                </tr>
                            </ItemTemplate>
                        </PagedTable>
                    </div>
                    <div class="tab-pane fade" id="tab-2">
                        <h5 class="card-title">Virtual data source</h5>
                        <p> Items retrieved from data source on demand.</p>
                        <VirtualPagedTable
                            ItemsProvider="ItemsProvider"
                            TItem="int"
                            OnRowSelect="OnRowSelectAsync"
                            Class="table table-hover table-striped w-100">
                            <HeaderTemplate>
                                <tr>
                                    <th>i</th>
                                </tr>
                            </HeaderTemplate>
                            <ItemTemplate Context="i">
                                <tr>
                                    <td>@i</td>
                                </tr>
                            </ItemTemplate>
                        </VirtualPagedTable>
                    </div>
                    <div class="tab-pane fade" id="tab-3">
                        <h5 class="card-title">Rapid table</h5>
                        <p> Update table continously from stream source</p>
                        <RapidTable Source="GetIntAsync()"
                                    ItemLimit="10"
                                    TItem="int"
                                    OnRowSelect="OnRowSelectAsync"
                                    Class="table table-hover table-striped w-100">
                            <HeaderTemplate>
                                <tr>
                                    <th>i</th>
                                </tr>
                            </HeaderTemplate>
                            <ItemTemplate Context="i">
                                <tr>
                                    <td>@i</td>
                                </tr>
                            </ItemTemplate>
                        </RapidTable>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="col-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title"> Dialogs</h5>
            </div>
            <div class="card-body">
                <div>
                    <button class="btn btn-primary btn-sm mx-1" @onclick="Confirm"> Confirm</button>
                    <button class="btn btn-info btn-sm mx-1" @onclick="Info"> Info</button>
                    <button class="btn btn-warning btn-sm mx-1" @onclick="Warning"> Warning</button>
                    <button class="btn btn-danger btn-sm mx-1" @onclick="Exception"> Exception</button>
                     <button class="btn btn-secondary btn-sm mx-1" @onclick="Custom"> Custom</button>
                </div>

            </div>

        </div>
        <div class="card">
            <div class="card-header">
                <h5 class="card-title"> Wizards</h5>
            </div>
            <div class="card-body">
                <button class="btn btn-primary btn-sm" @onclick="Wizard"> New Wallet</button>
            </div>
        </div>
    </div>

</div>


@code {

    private async Task Confirm()
    {
        await ViewService.ConfirmDialogAsync("Confirm", "Are you sure you want to do that ?", "Yes");
    }

    private async Task Info()
    {
        await ViewService.DialogAsync(Severity.Info, "Information", "Something important has happened.", "Dismiss");
    }

    private async Task Warning()
    {
        await ViewService.DialogAsync(Severity.Warning, "An error occured", "Something went wrong", "Dismiss");
    }

    private async Task Exception()
    {
        try
        {
            decimal zero = decimal.Zero;
            decimal snafu = 1 / zero;
        }
        catch (Exception e)
        {
            await ViewService.ExceptionDialogAsync(e, "Error");
        }
    }

    private async Task Custom()
    {
    //Build a custom render fragment to show in the dialog. Could be a prebuilt component in another file as well. 

        RenderFragment frag = builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(0, "class", "text-center");
            builder.OpenElement(1, "img");
            builder.AddAttribute(1, "src", "https://www.coinbuzz.com/wp-content/uploads/2015/03/bitcoin-logo-plain.png");
            builder.AddAttribute(1, "height", 100);
            builder.AddAttribute(1, "width", 100);
            builder.CloseElement();

            builder.OpenElement(2, "p");
            builder.AddContent(2, "Bitcoin");
            builder.CloseElement();
            builder.CloseElement();
        };

        await ViewService.DialogAsync(frag, "A custom dialog", "Got it");
    }

    private async Task Wizard()
    {
        var builder = new DefaultWizardBuilder<NewWalletModel>();
        var wizard = builder.NewWizard("New Wallet")
            .AddStep<WalletNameStep>()
            .AddStep<WalletTypeStep>()
            .WithModel(new NewWalletModel())
            .OnFinished(x => Task.FromResult<Result<bool>>(true))
            .Build();

        await ViewService.WizardDialogAsync(wizard);
    }

    private async Task OnRowSelectAsync(int i)
    {
        await ViewService.DialogAsync(Severity.Info, "Number", i.ToString());
    }


    List<int> Items = new(Enumerable.Range(1, 9999));

    private Task<ItemsResponse<int>> ItemsProvider(ItemRequest request)
    {
        return Task.FromResult(new ItemsResponse<int>(Items.Skip(request.Index).Take(request.Count), Items.Count));
    }

    private CancellationTokenSource EnumeratorCts { get; } = new();

    private async IAsyncEnumerable<int> GetIntAsync()
    {
        int last = 0;
        Random rand = new();

        while (!EnumeratorCts.IsCancellationRequested)
        {
            await Task.Delay(rand.Next(1000, 3000));
            yield return last++;
        }
    }

    public void Dispose()
    {
        EnumeratorCts.Cancel();
    }

}