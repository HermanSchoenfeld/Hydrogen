@page "/widget-gallery/paging-table"
@using VelocityNET.Presentation.Hydrogen.Models
@inherits ComponentWithViewModel<PagingTableViewModel>

<h1 class="h3 mb-2 text-gray-800">Tables</h1>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">Paged Table</div>
            <div class="card-body">
                <PagedTableTemplate Items="Blocks" TItem="Block" PageSize="10" OnRowSelect="@ViewModel!.OnClickRowAsync">
                    <HeaderTemplate>
                        <tr>
                            <th> Address</th>
                            <th> Number</th>
                        </tr>
                    </HeaderTemplate>
                    <ItemTemplate Context="block">
                        <tr>
                            <td>@block.Address</td>
                            <td>@block.Number</td>
                        </tr>
                    </ItemTemplate>
                </PagedTableTemplate>
            </div>
        </div>
    </div>
    @* <div class="col-md-6"> *@
    @*     <div class="card"> *@
    @*         <div class="card-body"> *@
    @*             <div class="card-header"> Virtual paged table</div> *@
    @*             <VirtualPagedTableTemplate ItemsProvider="@ViewModel!.NodeService.GetBlocksAsync" TItem="Block" PageSize="10" OnRowSelect="@ViewModel!.OnClickRowAsync"> *@
    @*                 <HeaderTemplate> *@
    @*                     <tr> *@
    @*                         <th> Address</th> *@
    @*                         <th> Number</th> *@
    @*                     </tr> *@
    @*                 </HeaderTemplate> *@
    @*                 <ItemTemplate Context="block"> *@
    @*                     <tr> *@
    @*                         <td>@block.Address</td> *@
    @*                         <td>@block.Number</td> *@
    @*                     </tr> *@
    @*                 </ItemTemplate> *@
    @*             </VirtualPagedTableTemplate> *@
    @*         </div> *@
    @*     </div> *@
    @* </div> *@
</div>


@code
{
    List<Block> Blocks { get; } = Enumerable.Range(0, 100).Select(x => new Block() {Address = Guid.NewGuid().ToString(), Number = x}).ToList();
}