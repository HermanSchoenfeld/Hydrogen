@typeparam TItem

<table class="table table-borderless table-hover overflow-auto">
    <thead>
    @HeaderTemplate
    </thead>

    <tbody>
    @if (Items is not null)
    {
        @foreach (TItem item in Items)
        {
            if (ItemTemplate is not null)
            {
                <span @onclick="() => OnRowSelect.InvokeAsync(item)" style="display: contents">
                    @ItemTemplate(item)
                </span>
            }
        }
    }
    </tbody>
</table>

@code {

    /// <summary>
    /// Gets or sets the items being displayed in the table
    /// </summary>
    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    /// <summary>
    /// Gets or sets the item template
    /// </summary>
    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    /// <summary>
    /// Gets or sets the header template
    /// </summary>
    [Parameter]
    public RenderFragment HeaderTemplate { get; set; }

    /// <summary>
    /// Gets or sets the callback to call when row is clicked
    /// </summary>
    [Parameter] public EventCallback<TItem> OnRowSelect { get; set; } = EventCallback<TItem>.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (ItemTemplate is null)
        {
            throw new InvalidOperationException("Item template parameter is required.");
        }
        
        if (HeaderTemplate is null)
        {
            throw new InvalidOperationException("Header template parameter is required.");
        }

        if (Items is null)
        {
                throw new InvalidOperationException("Items parameter is required.");
        }
    }

}