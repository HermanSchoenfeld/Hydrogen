@typeparam TItem
@inherits ComponentWithViewModel<VirtualPagedTableViewModel<TItem>>
@using Microsoft.AspNetCore.Components.Forms


<table class="@Class">
    <thead>
    @HeaderTemplate
    </thead>

    <tbody>
    @foreach (TItem item in ViewModel!.Page)
    {
        if (ItemTemplate is not null)
        {
            <span @onclick="() => OnRowSelect.InvokeAsync(item)" style="display: contents">
                @ItemTemplate(item)
            </span>
        }
    }
    </tbody>
    <nav aria-label="...">
        <ul class="pagination">
            <li class="page-item @PreviousItemClass">
                <a class="page-link" @onclick="ViewModel!.PrevPageAsync" tabindex="-1">Previous</a>
            </li>
            @if (ViewModel!.HasPrevPage)
            {
                <li class="page-item">
                    <a class="page-link" @onclick="ViewModel!.PrevPageAsync"> @(ViewModel!.CurrentPage - 1)</a>
                </li>
            }

            <li class="page-item active">
                <a class="page-link">
                    @ViewModel!.CurrentPage <span class="sr-only">(current)</span>
                </a>
            </li>

            @if (ViewModel!.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" @onclick="ViewModel!.NextPageAsync">@(ViewModel!.CurrentPage + 1)</a>
                </li>
            }

            <li class="page-item @NextItemClass">
                <a class="page-link" @onclick="ViewModel!.NextPageAsync">Next</a>
            </li>
        </ul>
    </nav>

</table>

<PageSelector Model="@ViewModel" Value="@ViewModel.PageSize" ValueExpression="@(() => ViewModel.PageSize)" ValueChanged="@ViewModel!.SetPageSizeAsync"/>

@code
{
    private string PreviousItemClass => ViewModel!.HasPrevPage ? string.Empty : "disabled";

    private string NextItemClass => ViewModel!.HasNextPage ? string.Empty : "disabled";
}